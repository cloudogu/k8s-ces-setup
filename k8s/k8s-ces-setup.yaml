#template:
# The service makes the setup available via port 30080. We should switch to a LoadBalancer if we figure out how to
# solve out external IP assignment
#
apiVersion: v1
kind: Service
metadata:
  name: k8s-ces-setup
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup
spec:
  type: NodePort
  ports:
    - name: setup
      port: 8080
      targetPort: setup-webui
      nodePort: 30080
  selector:
    app.kubernetes.io/name: k8s-ces-setup
---
#
# The role provides the setup with all permissions  to get, list and create new namespaces.
#
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8s-ces-setup
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"
---
# Role in kube-system used to deploy cert-manager because cert-manager do leader election in this namespace.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8s-ces-setup
  namespace: kube-system
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup
rules:
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
      - rolebindings
    verbs:
      - get
      - create
      - delete
---
#
# The cluster role helps the setup to provide the dogu operator with the dogu CRD
#
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-ces-setup-cluster-resources
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup
    # Specify these labels to grant permissions to the admin default role
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
  # allow to install the dogu CRD from the dogu operator
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - create
      - patch
      - update
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterroles
      - clusterrolebindings
    verbs:
      - "*"
  - apiGroups:
      - "*"
    resources:
      - ingressclasses
    verbs:
      - get
      - create
      - list
      - watch
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
      - validatingwebhookconfigurations
    verbs:
      - get
      - create
      - delete
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - create
  - apiGroups:
      - cert-manager.io
    resources:
      - clusterissuers
    verbs:
      - get
      - create
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-ces-setup-cluster-non-resources
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup
    # Specify these labels to grant permissions to the admin default role
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
  # allow to install a metrics cluster role of the dogu operator
  # it would be more secure if this rule would be delegated from setup/dogu operator to the initial setup process
  - nonResourceURLs:
      - /metrics
    verbs:
      - create
      - patch
      - update
      - get
---
# The service account is a token mounted into our setup pod. This token is used as authentication token against the
# K8s cluster.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-ces-setup
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup
automountServiceAccountToken: true
---
#
# The role binding binds our role to our service account, and, thus, gives him all permission defined
# in that role.
#
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8s-ces-setup
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k8s-ces-setup
subjects:
  - kind: ServiceAccount
    name: k8s-ces-setup
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8s-ces-setup
  namespace: kube-system
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k8s-ces-setup
subjects:
  - kind: ServiceAccount
    name: k8s-ces-setup
    namespace: '{{ .Namespace }}'
---
#
# The cluster role binding binds our cluster role to our service account, and, thus, gives him all permission defined
# in the cluster role.
#
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-ces-setup-cluster-resources
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-ces-setup-cluster-resources
subjects:
  - kind: ServiceAccount
    name: k8s-ces-setup
    namespace: '{{ .Namespace }}'
---
#
# The cluster role binding binds our cluster role to our service account, and, thus, gives him all permission defined
# in the cluster role.
#
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-ces-setup-cluster-non-resources
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-ces-setup-cluster-non-resources
subjects:
  - kind: ServiceAccount
    name: k8s-ces-setup
    namespace: '{{ .Namespace }}'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-ces-setup-cleanup-script
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup-finisher
data:
  entrypoint.sh: "#!/bin/bash\nSTATE=$(kubectl get configmap k8s-setup-config -o jsonpath='{.data.state}');\nif [[ ${STATE} == \"installed\" ]]; then \n kubectl get secrets | awk '{print $1\" \"$2}' | grep helm.sh/release | awk '{print $1}' | grep k8s-ces-setup | xargs kubectl delete secrets || true\n kubectl delete configmap k8s-ces-setup-json || true\n  kubectl delete configmap k8s-setup-config || true\n  kubectl delete deployments,services,configmaps,secrets,roles,rolebindings,clusterroles,clusterrolebindings,serviceaccounts -l app.kubernetes.io/name=k8s-ces-setup || true\n  kubectl patch cronjob cleanup -p '{\"spec\" : {\"suspend\" : true }}'\n  kubectl delete configmap k8s-ces-setup-cleanup-script\n  kubectl delete cronjob k8s-ces-setup-finisher\n  kubectl delete serviceaccount k8s-ces-setup-finisher\n  kubectl delete rolebinding k8s-ces-setup-finisher\nelse \n  echo \"setup seems not to be installed or successfully executed\";\nfi"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-ces-setup-finisher
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup-finisher
rules:
  - apiGroups:
      - "*"
    resources:
      - clusterroles
      - clusterrolebindings
    verbs:
      - delete
      - get
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-ces-setup-finisher
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup-finisher
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-ces-setup-finisher
subjects:
  - kind: ServiceAccount
    name: k8s-ces-setup-finisher
    namespace: '{{ .Namespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8s-ces-setup-finisher
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup-finisher
rules:
  - apiGroups:
      - "*"
    resources:
      - configmaps
      - services
      - secrets
      - deployments
      - roles
      - rolebindings
      - clusterroles
      - clusterrolebindings
      - serviceaccounts
      - cronjobs
    verbs:
      - delete
      - get
      - list
  - apiGroups:
      - "*"
    resources:
      - cronjobs
    verbs:
      - patch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-ces-setup-finisher
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup-finisher
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8s-ces-setup-finisher
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-setup-finisher
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k8s-ces-setup-finisher
subjects:
  - kind: ServiceAccount
    name: k8s-ces-setup-finisher
