// Code generated by mockery v2.53.3. DO NOT EDIT.

package validation

import (
	context "github.com/cloudogu/k8s-ces-setup/v2/app/context"
	mock "github.com/stretchr/testify/mock"
)

// MockNamingValidator is an autogenerated mock type for the NamingValidator type
type MockNamingValidator struct {
	mock.Mock
}

type MockNamingValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNamingValidator) EXPECT() *MockNamingValidator_Expecter {
	return &MockNamingValidator_Expecter{mock: &_m.Mock}
}

// ValidateNaming provides a mock function with given fields: naming
func (_m *MockNamingValidator) ValidateNaming(naming context.Naming) error {
	ret := _m.Called(naming)

	if len(ret) == 0 {
		panic("no return value specified for ValidateNaming")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Naming) error); ok {
		r0 = rf(naming)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNamingValidator_ValidateNaming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateNaming'
type MockNamingValidator_ValidateNaming_Call struct {
	*mock.Call
}

// ValidateNaming is a helper method to define mock.On call
//   - naming context.Naming
func (_e *MockNamingValidator_Expecter) ValidateNaming(naming interface{}) *MockNamingValidator_ValidateNaming_Call {
	return &MockNamingValidator_ValidateNaming_Call{Call: _e.mock.On("ValidateNaming", naming)}
}

func (_c *MockNamingValidator_ValidateNaming_Call) Run(run func(naming context.Naming)) *MockNamingValidator_ValidateNaming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Naming))
	})
	return _c
}

func (_c *MockNamingValidator_ValidateNaming_Call) Return(_a0 error) *MockNamingValidator_ValidateNaming_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNamingValidator_ValidateNaming_Call) RunAndReturn(run func(context.Naming) error) *MockNamingValidator_ValidateNaming_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNamingValidator creates a new instance of MockNamingValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNamingValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNamingValidator {
	mock := &MockNamingValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
