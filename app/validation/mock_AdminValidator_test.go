// Code generated by mockery v2.42.1. DO NOT EDIT.

package validation

import (
	context "github.com/cloudogu/k8s-ces-setup/app/context"
	mock "github.com/stretchr/testify/mock"
)

// MockAdminValidator is an autogenerated mock type for the AdminValidator type
type MockAdminValidator struct {
	mock.Mock
}

type MockAdminValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdminValidator) EXPECT() *MockAdminValidator_Expecter {
	return &MockAdminValidator_Expecter{mock: &_m.Mock}
}

// ValidateAdmin provides a mock function with given fields: admin, dsType
func (_m *MockAdminValidator) ValidateAdmin(admin context.User, dsType string) error {
	ret := _m.Called(admin, dsType)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.User, string) error); ok {
		r0 = rf(admin, dsType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdminValidator_ValidateAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAdmin'
type MockAdminValidator_ValidateAdmin_Call struct {
	*mock.Call
}

// ValidateAdmin is a helper method to define mock.On call
//   - admin context.User
//   - dsType string
func (_e *MockAdminValidator_Expecter) ValidateAdmin(admin interface{}, dsType interface{}) *MockAdminValidator_ValidateAdmin_Call {
	return &MockAdminValidator_ValidateAdmin_Call{Call: _e.mock.On("ValidateAdmin", admin, dsType)}
}

func (_c *MockAdminValidator_ValidateAdmin_Call) Run(run func(admin context.User, dsType string)) *MockAdminValidator_ValidateAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.User), args[1].(string))
	})
	return _c
}

func (_c *MockAdminValidator_ValidateAdmin_Call) Return(_a0 error) *MockAdminValidator_ValidateAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdminValidator_ValidateAdmin_Call) RunAndReturn(run func(context.User, string) error) *MockAdminValidator_ValidateAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdminValidator creates a new instance of MockAdminValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdminValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdminValidator {
	mock := &MockAdminValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
