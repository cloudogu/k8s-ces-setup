// Code generated by mockery v2.42.1. DO NOT EDIT.

package data

import (
	context "context"

	registry "github.com/cloudogu/k8s-registry-lib/registry"
	mock "github.com/stretchr/testify/mock"
)

// MockConfigRegistryProvider is an autogenerated mock type for the DoguConfigurationRegistryProvider type
type MockConfigRegistryProvider[T registry.ConfigurationRegistry] struct {
	mock.Mock
}

type MockConfigRegistryProvider_Expecter[T registry.ConfigurationRegistry] struct {
	mock *mock.Mock
}

func (_m *MockConfigRegistryProvider[T]) EXPECT() *MockConfigRegistryProvider_Expecter[T] {
	return &MockConfigRegistryProvider_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, name
func (_m *MockConfigRegistryProvider[T]) Execute(ctx context.Context, name string) (T, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (T, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) T); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigRegistryProvider_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockConfigRegistryProvider_Execute_Call[T registry.ConfigurationRegistry] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockConfigRegistryProvider_Expecter[T]) Execute(ctx interface{}, name interface{}) *MockConfigRegistryProvider_Execute_Call[T] {
	return &MockConfigRegistryProvider_Execute_Call[T]{Call: _e.mock.On("Execute", ctx, name)}
}

func (_c *MockConfigRegistryProvider_Execute_Call[T]) Run(run func(ctx context.Context, name string)) *MockConfigRegistryProvider_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConfigRegistryProvider_Execute_Call[T]) Return(_a0 T, _a1 error) *MockConfigRegistryProvider_Execute_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigRegistryProvider_Execute_Call[T]) RunAndReturn(run func(context.Context, string) (T, error)) *MockConfigRegistryProvider_Execute_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigRegistryProvider creates a new instance of MockConfigRegistryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigRegistryProvider[T registry.ConfigurationRegistry](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigRegistryProvider[T] {
	mock := &MockConfigRegistryProvider[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
