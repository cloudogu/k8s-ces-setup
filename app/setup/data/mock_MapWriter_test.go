// Code generated by mockery v2.20.0. DO NOT EDIT.

package data

import (
	context "github.com/cloudogu/k8s-ces-setup/app/context"
	mock "github.com/stretchr/testify/mock"
)

// MockMapWriter is an autogenerated mock type for the MapWriter type
type MockMapWriter struct {
	mock.Mock
}

type MockMapWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMapWriter) EXPECT() *MockMapWriter_Expecter {
	return &MockMapWriter_Expecter{mock: &_m.Mock}
}

// WriteConfigToStringDataMap provides a mock function with given fields: registryConfig
func (_m *MockMapWriter) WriteConfigToStringDataMap(registryConfig context.CustomKeyValue) (map[string]map[string]string, error) {
	ret := _m.Called(registryConfig)

	var r0 map[string]map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.CustomKeyValue) (map[string]map[string]string, error)); ok {
		return rf(registryConfig)
	}
	if rf, ok := ret.Get(0).(func(context.CustomKeyValue) map[string]map[string]string); ok {
		r0 = rf(registryConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.CustomKeyValue) error); ok {
		r1 = rf(registryConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMapWriter_WriteConfigToStringDataMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteConfigToStringDataMap'
type MockMapWriter_WriteConfigToStringDataMap_Call struct {
	*mock.Call
}

// WriteConfigToStringDataMap is a helper method to define mock.On call
//  - registryConfig context.CustomKeyValue
func (_e *MockMapWriter_Expecter) WriteConfigToStringDataMap(registryConfig interface{}) *MockMapWriter_WriteConfigToStringDataMap_Call {
	return &MockMapWriter_WriteConfigToStringDataMap_Call{Call: _e.mock.On("WriteConfigToStringDataMap", registryConfig)}
}

func (_c *MockMapWriter_WriteConfigToStringDataMap_Call) Run(run func(registryConfig context.CustomKeyValue)) *MockMapWriter_WriteConfigToStringDataMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.CustomKeyValue))
	})
	return _c
}

func (_c *MockMapWriter_WriteConfigToStringDataMap_Call) Return(_a0 map[string]map[string]string, _a1 error) *MockMapWriter_WriteConfigToStringDataMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMapWriter_WriteConfigToStringDataMap_Call) RunAndReturn(run func(context.CustomKeyValue) (map[string]map[string]string, error)) *MockMapWriter_WriteConfigToStringDataMap_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMapWriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMapWriter creates a new instance of MockMapWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMapWriter(t mockConstructorTestingTNewMockMapWriter) *MockMapWriter {
	mock := &MockMapWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
