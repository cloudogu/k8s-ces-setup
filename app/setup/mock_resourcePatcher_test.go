// Code generated by mockery v2.53.3. DO NOT EDIT.

package setup

import (
	context "context"

	patch "github.com/cloudogu/k8s-ces-setup/v2/app/patch"
	mock "github.com/stretchr/testify/mock"
)

// mockResourcePatcher is an autogenerated mock type for the resourcePatcher type
type mockResourcePatcher struct {
	mock.Mock
}

type mockResourcePatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *mockResourcePatcher) EXPECT() *mockResourcePatcher_Expecter {
	return &mockResourcePatcher_Expecter{mock: &_m.Mock}
}

// Patch provides a mock function with given fields: ctx, phase, patches
func (_m *mockResourcePatcher) Patch(ctx context.Context, phase patch.Phase, patches []patch.ResourcePatch) error {
	ret := _m.Called(ctx, phase, patches)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, patch.Phase, []patch.ResourcePatch) error); ok {
		r0 = rf(ctx, phase, patches)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockResourcePatcher_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type mockResourcePatcher_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - phase patch.Phase
//   - patches []patch.ResourcePatch
func (_e *mockResourcePatcher_Expecter) Patch(ctx interface{}, phase interface{}, patches interface{}) *mockResourcePatcher_Patch_Call {
	return &mockResourcePatcher_Patch_Call{Call: _e.mock.On("Patch", ctx, phase, patches)}
}

func (_c *mockResourcePatcher_Patch_Call) Run(run func(ctx context.Context, phase patch.Phase, patches []patch.ResourcePatch)) *mockResourcePatcher_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(patch.Phase), args[2].([]patch.ResourcePatch))
	})
	return _c
}

func (_c *mockResourcePatcher_Patch_Call) Return(_a0 error) *mockResourcePatcher_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockResourcePatcher_Patch_Call) RunAndReturn(run func(context.Context, patch.Phase, []patch.ResourcePatch) error) *mockResourcePatcher_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// newMockResourcePatcher creates a new instance of mockResourcePatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockResourcePatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockResourcePatcher {
	mock := &mockResourcePatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
