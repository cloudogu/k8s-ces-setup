// Code generated by mockery v2.53.3. DO NOT EDIT.

package setup

import (
	http "net/http"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// mockGinRoutes is an autogenerated mock type for the ginRoutes type
type mockGinRoutes struct {
	mock.Mock
}

type mockGinRoutes_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGinRoutes) EXPECT() *mockGinRoutes_Expecter {
	return &mockGinRoutes_Expecter{mock: &_m.Mock}
}

// Any provides a mock function with given fields: _a0, _a1
func (_m *mockGinRoutes) Any(_a0 string, _a1 ...gin.HandlerFunc) gin.IRoutes {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Any")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, ...gin.HandlerFunc) gin.IRoutes); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_Any_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Any'
type mockGinRoutes_Any_Call struct {
	*mock.Call
}

// Any is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...gin.HandlerFunc
func (_e *mockGinRoutes_Expecter) Any(_a0 interface{}, _a1 ...interface{}) *mockGinRoutes_Any_Call {
	return &mockGinRoutes_Any_Call{Call: _e.mock.On("Any",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *mockGinRoutes_Any_Call) Run(run func(_a0 string, _a1 ...gin.HandlerFunc)) *mockGinRoutes_Any_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockGinRoutes_Any_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_Any_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_Any_Call) RunAndReturn(run func(string, ...gin.HandlerFunc) gin.IRoutes) *mockGinRoutes_Any_Call {
	_c.Call.Return(run)
	return _c
}

// DELETE provides a mock function with given fields: _a0, _a1
func (_m *mockGinRoutes) DELETE(_a0 string, _a1 ...gin.HandlerFunc) gin.IRoutes {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DELETE")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, ...gin.HandlerFunc) gin.IRoutes); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_DELETE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DELETE'
type mockGinRoutes_DELETE_Call struct {
	*mock.Call
}

// DELETE is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...gin.HandlerFunc
func (_e *mockGinRoutes_Expecter) DELETE(_a0 interface{}, _a1 ...interface{}) *mockGinRoutes_DELETE_Call {
	return &mockGinRoutes_DELETE_Call{Call: _e.mock.On("DELETE",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *mockGinRoutes_DELETE_Call) Run(run func(_a0 string, _a1 ...gin.HandlerFunc)) *mockGinRoutes_DELETE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockGinRoutes_DELETE_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_DELETE_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_DELETE_Call) RunAndReturn(run func(string, ...gin.HandlerFunc) gin.IRoutes) *mockGinRoutes_DELETE_Call {
	_c.Call.Return(run)
	return _c
}

// GET provides a mock function with given fields: _a0, _a1
func (_m *mockGinRoutes) GET(_a0 string, _a1 ...gin.HandlerFunc) gin.IRoutes {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GET")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, ...gin.HandlerFunc) gin.IRoutes); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_GET_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GET'
type mockGinRoutes_GET_Call struct {
	*mock.Call
}

// GET is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...gin.HandlerFunc
func (_e *mockGinRoutes_Expecter) GET(_a0 interface{}, _a1 ...interface{}) *mockGinRoutes_GET_Call {
	return &mockGinRoutes_GET_Call{Call: _e.mock.On("GET",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *mockGinRoutes_GET_Call) Run(run func(_a0 string, _a1 ...gin.HandlerFunc)) *mockGinRoutes_GET_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockGinRoutes_GET_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_GET_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_GET_Call) RunAndReturn(run func(string, ...gin.HandlerFunc) gin.IRoutes) *mockGinRoutes_GET_Call {
	_c.Call.Return(run)
	return _c
}

// HEAD provides a mock function with given fields: _a0, _a1
func (_m *mockGinRoutes) HEAD(_a0 string, _a1 ...gin.HandlerFunc) gin.IRoutes {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HEAD")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, ...gin.HandlerFunc) gin.IRoutes); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_HEAD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HEAD'
type mockGinRoutes_HEAD_Call struct {
	*mock.Call
}

// HEAD is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...gin.HandlerFunc
func (_e *mockGinRoutes_Expecter) HEAD(_a0 interface{}, _a1 ...interface{}) *mockGinRoutes_HEAD_Call {
	return &mockGinRoutes_HEAD_Call{Call: _e.mock.On("HEAD",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *mockGinRoutes_HEAD_Call) Run(run func(_a0 string, _a1 ...gin.HandlerFunc)) *mockGinRoutes_HEAD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockGinRoutes_HEAD_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_HEAD_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_HEAD_Call) RunAndReturn(run func(string, ...gin.HandlerFunc) gin.IRoutes) *mockGinRoutes_HEAD_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockGinRoutes) Handle(_a0 string, _a1 string, _a2 ...gin.HandlerFunc) gin.IRoutes {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, string, ...gin.HandlerFunc) gin.IRoutes); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type mockGinRoutes_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
//   - _a2 ...gin.HandlerFunc
func (_e *mockGinRoutes_Expecter) Handle(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockGinRoutes_Handle_Call {
	return &mockGinRoutes_Handle_Call{Call: _e.mock.On("Handle",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockGinRoutes_Handle_Call) Run(run func(_a0 string, _a1 string, _a2 ...gin.HandlerFunc)) *mockGinRoutes_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(args[0].(string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockGinRoutes_Handle_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_Handle_Call) RunAndReturn(run func(string, string, ...gin.HandlerFunc) gin.IRoutes) *mockGinRoutes_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// Match provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockGinRoutes) Match(_a0 []string, _a1 string, _a2 ...gin.HandlerFunc) gin.IRoutes {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func([]string, string, ...gin.HandlerFunc) gin.IRoutes); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type mockGinRoutes_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - _a0 []string
//   - _a1 string
//   - _a2 ...gin.HandlerFunc
func (_e *mockGinRoutes_Expecter) Match(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockGinRoutes_Match_Call {
	return &mockGinRoutes_Match_Call{Call: _e.mock.On("Match",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockGinRoutes_Match_Call) Run(run func(_a0 []string, _a1 string, _a2 ...gin.HandlerFunc)) *mockGinRoutes_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(args[0].([]string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockGinRoutes_Match_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_Match_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_Match_Call) RunAndReturn(run func([]string, string, ...gin.HandlerFunc) gin.IRoutes) *mockGinRoutes_Match_Call {
	_c.Call.Return(run)
	return _c
}

// OPTIONS provides a mock function with given fields: _a0, _a1
func (_m *mockGinRoutes) OPTIONS(_a0 string, _a1 ...gin.HandlerFunc) gin.IRoutes {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OPTIONS")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, ...gin.HandlerFunc) gin.IRoutes); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_OPTIONS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OPTIONS'
type mockGinRoutes_OPTIONS_Call struct {
	*mock.Call
}

// OPTIONS is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...gin.HandlerFunc
func (_e *mockGinRoutes_Expecter) OPTIONS(_a0 interface{}, _a1 ...interface{}) *mockGinRoutes_OPTIONS_Call {
	return &mockGinRoutes_OPTIONS_Call{Call: _e.mock.On("OPTIONS",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *mockGinRoutes_OPTIONS_Call) Run(run func(_a0 string, _a1 ...gin.HandlerFunc)) *mockGinRoutes_OPTIONS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockGinRoutes_OPTIONS_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_OPTIONS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_OPTIONS_Call) RunAndReturn(run func(string, ...gin.HandlerFunc) gin.IRoutes) *mockGinRoutes_OPTIONS_Call {
	_c.Call.Return(run)
	return _c
}

// PATCH provides a mock function with given fields: _a0, _a1
func (_m *mockGinRoutes) PATCH(_a0 string, _a1 ...gin.HandlerFunc) gin.IRoutes {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PATCH")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, ...gin.HandlerFunc) gin.IRoutes); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_PATCH_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PATCH'
type mockGinRoutes_PATCH_Call struct {
	*mock.Call
}

// PATCH is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...gin.HandlerFunc
func (_e *mockGinRoutes_Expecter) PATCH(_a0 interface{}, _a1 ...interface{}) *mockGinRoutes_PATCH_Call {
	return &mockGinRoutes_PATCH_Call{Call: _e.mock.On("PATCH",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *mockGinRoutes_PATCH_Call) Run(run func(_a0 string, _a1 ...gin.HandlerFunc)) *mockGinRoutes_PATCH_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockGinRoutes_PATCH_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_PATCH_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_PATCH_Call) RunAndReturn(run func(string, ...gin.HandlerFunc) gin.IRoutes) *mockGinRoutes_PATCH_Call {
	_c.Call.Return(run)
	return _c
}

// POST provides a mock function with given fields: _a0, _a1
func (_m *mockGinRoutes) POST(_a0 string, _a1 ...gin.HandlerFunc) gin.IRoutes {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for POST")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, ...gin.HandlerFunc) gin.IRoutes); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_POST_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'POST'
type mockGinRoutes_POST_Call struct {
	*mock.Call
}

// POST is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...gin.HandlerFunc
func (_e *mockGinRoutes_Expecter) POST(_a0 interface{}, _a1 ...interface{}) *mockGinRoutes_POST_Call {
	return &mockGinRoutes_POST_Call{Call: _e.mock.On("POST",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *mockGinRoutes_POST_Call) Run(run func(_a0 string, _a1 ...gin.HandlerFunc)) *mockGinRoutes_POST_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockGinRoutes_POST_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_POST_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_POST_Call) RunAndReturn(run func(string, ...gin.HandlerFunc) gin.IRoutes) *mockGinRoutes_POST_Call {
	_c.Call.Return(run)
	return _c
}

// PUT provides a mock function with given fields: _a0, _a1
func (_m *mockGinRoutes) PUT(_a0 string, _a1 ...gin.HandlerFunc) gin.IRoutes {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PUT")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, ...gin.HandlerFunc) gin.IRoutes); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_PUT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PUT'
type mockGinRoutes_PUT_Call struct {
	*mock.Call
}

// PUT is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...gin.HandlerFunc
func (_e *mockGinRoutes_Expecter) PUT(_a0 interface{}, _a1 ...interface{}) *mockGinRoutes_PUT_Call {
	return &mockGinRoutes_PUT_Call{Call: _e.mock.On("PUT",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *mockGinRoutes_PUT_Call) Run(run func(_a0 string, _a1 ...gin.HandlerFunc)) *mockGinRoutes_PUT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockGinRoutes_PUT_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_PUT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_PUT_Call) RunAndReturn(run func(string, ...gin.HandlerFunc) gin.IRoutes) *mockGinRoutes_PUT_Call {
	_c.Call.Return(run)
	return _c
}

// Static provides a mock function with given fields: _a0, _a1
func (_m *mockGinRoutes) Static(_a0 string, _a1 string) gin.IRoutes {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Static")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, string) gin.IRoutes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_Static_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Static'
type mockGinRoutes_Static_Call struct {
	*mock.Call
}

// Static is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *mockGinRoutes_Expecter) Static(_a0 interface{}, _a1 interface{}) *mockGinRoutes_Static_Call {
	return &mockGinRoutes_Static_Call{Call: _e.mock.On("Static", _a0, _a1)}
}

func (_c *mockGinRoutes_Static_Call) Run(run func(_a0 string, _a1 string)) *mockGinRoutes_Static_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockGinRoutes_Static_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_Static_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_Static_Call) RunAndReturn(run func(string, string) gin.IRoutes) *mockGinRoutes_Static_Call {
	_c.Call.Return(run)
	return _c
}

// StaticFS provides a mock function with given fields: _a0, _a1
func (_m *mockGinRoutes) StaticFS(_a0 string, _a1 http.FileSystem) gin.IRoutes {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StaticFS")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, http.FileSystem) gin.IRoutes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_StaticFS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StaticFS'
type mockGinRoutes_StaticFS_Call struct {
	*mock.Call
}

// StaticFS is a helper method to define mock.On call
//   - _a0 string
//   - _a1 http.FileSystem
func (_e *mockGinRoutes_Expecter) StaticFS(_a0 interface{}, _a1 interface{}) *mockGinRoutes_StaticFS_Call {
	return &mockGinRoutes_StaticFS_Call{Call: _e.mock.On("StaticFS", _a0, _a1)}
}

func (_c *mockGinRoutes_StaticFS_Call) Run(run func(_a0 string, _a1 http.FileSystem)) *mockGinRoutes_StaticFS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.FileSystem))
	})
	return _c
}

func (_c *mockGinRoutes_StaticFS_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_StaticFS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_StaticFS_Call) RunAndReturn(run func(string, http.FileSystem) gin.IRoutes) *mockGinRoutes_StaticFS_Call {
	_c.Call.Return(run)
	return _c
}

// StaticFile provides a mock function with given fields: _a0, _a1
func (_m *mockGinRoutes) StaticFile(_a0 string, _a1 string) gin.IRoutes {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StaticFile")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, string) gin.IRoutes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_StaticFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StaticFile'
type mockGinRoutes_StaticFile_Call struct {
	*mock.Call
}

// StaticFile is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *mockGinRoutes_Expecter) StaticFile(_a0 interface{}, _a1 interface{}) *mockGinRoutes_StaticFile_Call {
	return &mockGinRoutes_StaticFile_Call{Call: _e.mock.On("StaticFile", _a0, _a1)}
}

func (_c *mockGinRoutes_StaticFile_Call) Run(run func(_a0 string, _a1 string)) *mockGinRoutes_StaticFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockGinRoutes_StaticFile_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_StaticFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_StaticFile_Call) RunAndReturn(run func(string, string) gin.IRoutes) *mockGinRoutes_StaticFile_Call {
	_c.Call.Return(run)
	return _c
}

// StaticFileFS provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockGinRoutes) StaticFileFS(_a0 string, _a1 string, _a2 http.FileSystem) gin.IRoutes {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for StaticFileFS")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(string, string, http.FileSystem) gin.IRoutes); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_StaticFileFS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StaticFileFS'
type mockGinRoutes_StaticFileFS_Call struct {
	*mock.Call
}

// StaticFileFS is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
//   - _a2 http.FileSystem
func (_e *mockGinRoutes_Expecter) StaticFileFS(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockGinRoutes_StaticFileFS_Call {
	return &mockGinRoutes_StaticFileFS_Call{Call: _e.mock.On("StaticFileFS", _a0, _a1, _a2)}
}

func (_c *mockGinRoutes_StaticFileFS_Call) Run(run func(_a0 string, _a1 string, _a2 http.FileSystem)) *mockGinRoutes_StaticFileFS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(http.FileSystem))
	})
	return _c
}

func (_c *mockGinRoutes_StaticFileFS_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_StaticFileFS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_StaticFileFS_Call) RunAndReturn(run func(string, string, http.FileSystem) gin.IRoutes) *mockGinRoutes_StaticFileFS_Call {
	_c.Call.Return(run)
	return _c
}

// Use provides a mock function with given fields: _a0
func (_m *mockGinRoutes) Use(_a0 ...gin.HandlerFunc) gin.IRoutes {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Use")
	}

	var r0 gin.IRoutes
	if rf, ok := ret.Get(0).(func(...gin.HandlerFunc) gin.IRoutes); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.IRoutes)
		}
	}

	return r0
}

// mockGinRoutes_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type mockGinRoutes_Use_Call struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
//   - _a0 ...gin.HandlerFunc
func (_e *mockGinRoutes_Expecter) Use(_a0 ...interface{}) *mockGinRoutes_Use_Call {
	return &mockGinRoutes_Use_Call{Call: _e.mock.On("Use",
		append([]interface{}{}, _a0...)...)}
}

func (_c *mockGinRoutes_Use_Call) Run(run func(_a0 ...gin.HandlerFunc)) *mockGinRoutes_Use_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *mockGinRoutes_Use_Call) Return(_a0 gin.IRoutes) *mockGinRoutes_Use_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGinRoutes_Use_Call) RunAndReturn(run func(...gin.HandlerFunc) gin.IRoutes) *mockGinRoutes_Use_Call {
	_c.Call.Return(run)
	return _c
}

// newMockGinRoutes creates a new instance of mockGinRoutes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockGinRoutes(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockGinRoutes {
	mock := &mockGinRoutes{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
