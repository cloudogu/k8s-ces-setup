// Code generated by mockery v2.20.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockHelmClient is an autogenerated mock type for the helmClient type
type mockHelmClient struct {
	mock.Mock
}

type mockHelmClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockHelmClient) EXPECT() *mockHelmClient_Expecter {
	return &mockHelmClient_Expecter{mock: &_m.Mock}
}

// InstallOrUpgradeChart provides a mock function with given fields: ctx, namespace, chart, version
func (_m *mockHelmClient) InstallOrUpgradeChart(ctx context.Context, namespace string, chart string, version string) error {
	ret := _m.Called(ctx, namespace, chart, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, namespace, chart, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockHelmClient_InstallOrUpgradeChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallOrUpgradeChart'
type mockHelmClient_InstallOrUpgradeChart_Call struct {
	*mock.Call
}

// InstallOrUpgradeChart is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - chart string
//   - version string
func (_e *mockHelmClient_Expecter) InstallOrUpgradeChart(ctx interface{}, namespace interface{}, chart interface{}, version interface{}) *mockHelmClient_InstallOrUpgradeChart_Call {
	return &mockHelmClient_InstallOrUpgradeChart_Call{Call: _e.mock.On("InstallOrUpgradeChart", ctx, namespace, chart, version)}
}

func (_c *mockHelmClient_InstallOrUpgradeChart_Call) Run(run func(ctx context.Context, namespace string, chart string, version string)) *mockHelmClient_InstallOrUpgradeChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockHelmClient_InstallOrUpgradeChart_Call) Return(_a0 error) *mockHelmClient_InstallOrUpgradeChart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockHelmClient_InstallOrUpgradeChart_Call) RunAndReturn(run func(context.Context, string, string, string) error) *mockHelmClient_InstallOrUpgradeChart_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockHelmClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockHelmClient creates a new instance of mockHelmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockHelmClient(t mockConstructorTestingTnewMockHelmClient) *mockHelmClient {
	mock := &mockHelmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
