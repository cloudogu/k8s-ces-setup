// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	registry "github.com/cloudogu/cesapp-lib/registry"
	mock "github.com/stretchr/testify/mock"
)

// SetupExecutor is an autogenerated mock type for the SetupExecutor type
type SetupExecutor struct {
	mock.Mock
}

// PerformSetup provides a mock function with given fields:
func (_m *SetupExecutor) PerformSetup() (error, string) {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// RegisterComponentSetupSteps provides a mock function with given fields:
func (_m *SetupExecutor) RegisterComponentSetupSteps() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterDataSetupSteps provides a mock function with given fields: _a0
func (_m *SetupExecutor) RegisterDataSetupSteps(_a0 registry.Registry) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(registry.Registry) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterDoguInstallationSteps provides a mock function with given fields:
func (_m *SetupExecutor) RegisterDoguInstallationSteps() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterSSLGenerationStep provides a mock function with given fields:
func (_m *SetupExecutor) RegisterSSLGenerationStep() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterValidationStep provides a mock function with given fields:
func (_m *SetupExecutor) RegisterValidationStep() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
