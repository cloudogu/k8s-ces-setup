// Code generated by mockery v2.20.0. DO NOT EDIT.

package patch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// mockJsonPatchApplier is an autogenerated mock type for the jsonPatchApplier type
type mockJsonPatchApplier struct {
	mock.Mock
}

type mockJsonPatchApplier_Expecter struct {
	mock *mock.Mock
}

func (_m *mockJsonPatchApplier) EXPECT() *mockJsonPatchApplier_Expecter {
	return &mockJsonPatchApplier_Expecter{mock: &_m.Mock}
}

// Patch provides a mock function with given fields: ctx, jsonPatch, gvk, name
func (_m *mockJsonPatchApplier) Patch(ctx context.Context, jsonPatch []byte, gvk schema.GroupVersionKind, name string) error {
	ret := _m.Called(ctx, jsonPatch, gvk, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, schema.GroupVersionKind, string) error); ok {
		r0 = rf(ctx, jsonPatch, gvk, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockJsonPatchApplier_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type mockJsonPatchApplier_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - jsonPatch []byte
//   - gvk schema.GroupVersionKind
//   - name string
func (_e *mockJsonPatchApplier_Expecter) Patch(ctx interface{}, jsonPatch interface{}, gvk interface{}, name interface{}) *mockJsonPatchApplier_Patch_Call {
	return &mockJsonPatchApplier_Patch_Call{Call: _e.mock.On("Patch", ctx, jsonPatch, gvk, name)}
}

func (_c *mockJsonPatchApplier_Patch_Call) Run(run func(ctx context.Context, jsonPatch []byte, gvk schema.GroupVersionKind, name string)) *mockJsonPatchApplier_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(schema.GroupVersionKind), args[3].(string))
	})
	return _c
}

func (_c *mockJsonPatchApplier_Patch_Call) Return(_a0 error) *mockJsonPatchApplier_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockJsonPatchApplier_Patch_Call) RunAndReturn(run func(context.Context, []byte, schema.GroupVersionKind, string) error) *mockJsonPatchApplier_Patch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockJsonPatchApplier interface {
	mock.TestingT
	Cleanup(func())
}

// newMockJsonPatchApplier creates a new instance of mockJsonPatchApplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockJsonPatchApplier(t mockConstructorTestingTnewMockJsonPatchApplier) *mockJsonPatchApplier {
	mock := &mockJsonPatchApplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
