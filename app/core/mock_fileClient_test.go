// Code generated by mockery v2.53.3. DO NOT EDIT.

package core

import mock "github.com/stretchr/testify/mock"

// mockFileClient is an autogenerated mock type for the fileClient type
type mockFileClient struct {
	mock.Mock
}

type mockFileClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFileClient) EXPECT() *mockFileClient_Expecter {
	return &mockFileClient_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: url, username, password
func (_m *mockFileClient) Get(url string, username string, password string) ([]byte, error) {
	ret := _m.Called(url, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]byte, error)); ok {
		return rf(url, username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []byte); ok {
		r0 = rf(url, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(url, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFileClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockFileClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - url string
//   - username string
//   - password string
func (_e *mockFileClient_Expecter) Get(url interface{}, username interface{}, password interface{}) *mockFileClient_Get_Call {
	return &mockFileClient_Get_Call{Call: _e.mock.On("Get", url, username, password)}
}

func (_c *mockFileClient_Get_Call) Run(run func(url string, username string, password string)) *mockFileClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockFileClient_Get_Call) Return(_a0 []byte, _a1 error) *mockFileClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFileClient_Get_Call) RunAndReturn(run func(string, string, string) ([]byte, error)) *mockFileClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// newMockFileClient creates a new instance of mockFileClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFileClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFileClient {
	mock := &mockFileClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
