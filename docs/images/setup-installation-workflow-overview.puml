@startuml
!define CLOUDOGUURL https://raw.githubusercontent.com/cloudogu/plantuml-cloudogu-sprites/master

!includeurl CLOUDOGUURL/common.puml
!includeurl CLOUDOGUURL/dogus/cloudogu.puml
!includeurl CLOUDOGUURL/tools/docker.puml
!includeurl CLOUDOGUURL/tools/virtualbox.puml
!includeurl CLOUDOGUURL/dogus/nginx.puml
!includeurl CLOUDOGUURL/tools/etcd.puml
!includeurl CLOUDOGUURL/tools/k8s.puml
!define SECONDARY_COLOR #55EE55
!define TERTIARY_COLOR #EEEE66
!define QUATERNARY_COLOR #FF6633
!define POD_COLOR #abcdef

rectangle external as "External Services" {
    database registry as "Image Registry" #white
    file doguratoryaml as "Dogu Operator Resource" #white
}
note top of external #lightyellow
        Public services like
        - github.com
        - cloudogu.com or
        - a local web server (for YAML files)
    end note

rectangle "Cluster" as cluster <<$k8s>> {

    rectangle cp1 as "control-plane" <<$k8s>> #white

    rectangle targetns as "Target Namespace" {

        rectangle setupres as "Setup Resources" {
            rectangle ic as "Instance Credentials (Image/Dogu.json) (Secret)" <<$k8s>> TERTIARY_COLOR
            rectangle podSA as "service account" SECONDARY_COLOR
            rectangle setupconfig as "Setup Configuration" QUATERNARY_COLOR
            note top of setupconfig #lightyellow
                - Component URLs
                - Log level
                - Target namespace
            end note

            note top of podSA #lightyellow
                The setup might use RBAC permissions
                from different locations (f. i. from
                the setup itself or from the development
                machine)
            end note
        }

        rectangle setuppod as "Pod" POD_COLOR {
            rectangle setup as "k8s-ces-setup" <<$cloudogu>> #white {
                rectangle setupui as "Setup UI (TBD)" #lightgrey
                rectangle setupapi as "Setup API"
                rectangle setupbackend as "Setup Backend" {
                    file kubeConfig SECONDARY_COLOR
                    rectangle applier as "k8sApplyClient" #white

                    note bottom of applier #lightyellow
                        3b. use secret from UI
                    end note
                }
            }
        }

        rectangle targetapps as "Target Applications" #white {
            rectangle dogurator as "Dogu Operator" <<$cloudogu>> QUATERNARY_COLOR
            rectangle etcd as "etcd server" <<$etcd>> QUATERNARY_COLOR
            rectangle etcdclient as "etcd client" <<$etcd>> QUATERNARY_COLOR
        }
    }
}

actor admin as "Admin"

admin -.r-> targetns          : A. create target namespace
admin -.r-> ic                : B. deploy instance credentials
admin -.r-> setuppod          : C. deploy setup
admin -.r-> setup             : D. execute setup
setup --u-> setupconfig       : 1. read setup config
podSA -> kubeConfig           : 2. read cluster config \n(auto pod mounted)
ic <-- setupbackend           : 3a. read instance \ncredential if existing
applier <== doguratoryaml     : 4a./5a./6a. read resource

setupui --> setupapi          : provide data for the up-coming setup run
setupapi ----> setupbackend   : call backend with setup data
dogurator -u-> ic              : use credentials

applier --> kubeConfig        : uses
applier =r=> cp1              : 4./5./6. install components with \n resources from setup configuration
doguratoryaml -.> registry : reference image
cp1 -u-> dogurator
cp1 -u-> etcd
cp1 -u-> etcdclient

targetapps --l-> setuppod

'styling
dogurator --[hidden]u-> setupres
etcd --[hidden]u-> setupres
etcdclient --[hidden]r-> setupres
dogurator -[hidden]l-> etcd
etcd -[hidden]l-> etcdclient
dogurator ----[hidden]r-> etcdclient



legend bottom right
not shown:
- Dogu installation
end legend

caption Example workflow of how k8s-ces-setup installs Cloudogu K8s components
@enduml